from lexical.tokens.token_category import TokenCategory

class LexemeTable():
  def __init__(self):
    self.dict = {
      "main": TokenCategory.main.name,
      "int": TokenCategory.typeInt.name,
      "float": TokenCategory.typeFloat.name,
      "char": TokenCategory.typeChar.name,
      "string": TokenCategory.typeString.name,
      "bool": TokenCategory.typeBool.name,
      "for": TokenCategory.cmdFor.name,
      "while": TokenCategory.cmdWhile.name,
      "if": TokenCategory.cmdIf.name,
      "elsif": TokenCategory.cmdElsif.name,
      "else": TokenCategory.cmdElse.name,
      "fn": TokenCategory.fnDecl.name,
      "return": TokenCategory.fnRtn.name,
      ";": TokenCategory.semicolon.name,
      ",": TokenCategory.commaSep.name,
      "!": TokenCategory.opNot.name,
      "&&": TokenCategory.opAnd.name,
      "||": TokenCategory.opOr.name,
      "True": TokenCategory.opTrue.name,
      "False": TokenCategory.opFalse.name,
      "=": TokenCategory.opAttr.name,
      "==": TokenCategory.opEqual.name,
      "!=": TokenCategory.opNotEqual.name,
      ">": TokenCategory.opGtrThan.name,
      "<": TokenCategory.opLessThan.name,
      ">=": TokenCategory.opGtrEqual.name,
      "<=": TokenCategory.opLessEq.name,
      "+": TokenCategory.opAdd.name,
      "-": TokenCategory.opSub.name,
      "/": TokenCategory.opDiv.name,
      "*": TokenCategory.opMult.name,
      "%": TokenCategory.opMod.name,
      ".": TokenCategory.opConcat.name,
      "gets": TokenCategory.fnRead.name,
      "puts": TokenCategory.fnWrite.name,
      "(": TokenCategory.paramBegin.name,
      ")": TokenCategory.paramEnd.name,
      "[": TokenCategory.arrayBegin.name,
      "]": TokenCategory.arrayEnd.name,
      "{": TokenCategory.scopeBegin.name,
      "}": TokenCategory.scopeEnd.name,
      "void": TokenCategory.typeVoid.name,
      "EOF": TokenCategory.EOF.name,
    }